import io
from pathlib import Path

import pytest
from pyparsing import ParseException

from ..parse import Discriminant, Field, Padding, Type, Variant, parse

test_type_parse_data = [
    (
        "box-types.txt",
        [
            Type(
                type_name="std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".1",
                        field_size=0,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".0",
                        field_size=16,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                ],
            ),
            Type(
                type_name="std::boxed::Box<dyn std::any::Any + std::marker::Send>",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".1",
                        field_size=0,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".0",
                        field_size=16,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                ],
            ),
            Type(
                type_name="std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".1",
                        field_size=0,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".0",
                        field_size=16,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                ],
            ),
        ],
    ),
    (
        "empty-types.txt",
        [
            Type(
                type_name="std::marker::PhantomData<&std::sys::windows::args::Arg>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<&u8>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<(alloc::collections::btree::node::marker::Immut<'_>, alloc::collections::btree::node::marker::Leaf)>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<(alloc::collections::btree::node::marker::Immut<'_>, alloc::collections::btree::node::marker::LeafOrInternal)>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<(alloc::collections::btree::node::marker::Owned, alloc::collections::btree::node::marker::LeafOrInternal)>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<*mut ()>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<[std::mem::MaybeUninit<u8>]>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
            Type(
                type_name="std::marker::PhantomData<[u8]>",
                type_size=0,
                type_alignment_bytes=1,
                fields=[],
            ),
        ],
    ),
    (
        "misc-types.txt",
        [
            Type(
                type_name="std::char::EscapeDefault",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".state",
                        field_size=16,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    )
                ],
            ),
            Type(
                type_name="std::char::EscapeDefaultState",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Variant(
                        variant_name="Unicode",
                        variant_size=16,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=16,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                    Variant(
                        variant_name="Char",
                        variant_size=4,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=4,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                    Variant(
                        variant_name="Backslash",
                        variant_size=4,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=4,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                    Variant(variant_name="Done", variant_size=0, fields=[]),
                ],
            ),
            Type(
                type_name="std::char::EscapeUnicode",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".hex_digit_idx",
                        field_size=8,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".c",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".state",
                        field_size=1,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Padding(padding_size=3),
                ],
            ),
            Type(
                type_name="std::collections::Bound<usize>",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Discriminant(discriminant_size=8),
                    Variant(
                        variant_name="Included",
                        variant_size=8,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                    Variant(
                        variant_name="Excluded",
                        variant_size=8,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                    Variant(variant_name="Unbounded", variant_size=0, fields=[]),
                ],
            ),
            Type(
                type_name="std::collections::TryReserveError",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".kind",
                        field_size=16,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    )
                ],
            ),
            Type(
                type_name="std::collections::TryReserveErrorKind",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Variant(
                        variant_name="AllocError",
                        variant_size=16,
                        fields=[
                            Field(
                                field_name=".non_exhaustive",
                                field_size=0,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                            Field(
                                field_name=".layout",
                                field_size=16,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                        ],
                    ),
                    Variant(variant_name="CapacityOverflow", variant_size=0, fields=[]),
                ],
            ),
            Type(
                type_name="std::collections::hash_map::RandomState",
                type_size=16,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".k0",
                        field_size=8,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".k1",
                        field_size=8,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                ],
            ),
        ],
    ),
    (
        "structs.txt",
        [
            Type(
                type_name="std::sys::windows::c::WIN32_FIND_DATAW",
                type_size=592,
                type_alignment_bytes=4,
                fields=[
                    Field(
                        field_name=".dwFileAttributes",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".ftCreationTime",
                        field_size=8,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".ftLastAccessTime",
                        field_size=8,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".ftLastWriteTime",
                        field_size=8,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".nFileSizeHigh",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".nFileSizeLow",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".dwReserved0",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".dwReserved1",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".cFileName",
                        field_size=520,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".cAlternateFileName",
                        field_size=28,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                ],
            ),
            Type(
                type_name="std::sys::windows::c::fd_set",
                type_size=520,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".fd_count",
                        field_size=4,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Padding(padding_size=4),
                    Field(
                        field_name=".fd_array",
                        field_size=512,
                        field_offset_bytes=None,
                        field_alignment_bytes=8,
                    ),
                ],
            ),
            Type(
                type_name="std::backtrace::BacktraceFrame",
                type_size=312,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".frame",
                        field_size=288,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".symbols",
                        field_size=24,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                ],
            ),
            Type(
                type_name="std::io::BufWriter<std::io::stdio::StdoutRaw>",
                type_size=32,
                type_alignment_bytes=8,
                fields=[
                    Field(
                        field_name=".buf",
                        field_size=24,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".inner",
                        field_size=5,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Field(
                        field_name=".panicked",
                        field_size=1,
                        field_offset_bytes=None,
                        field_alignment_bytes=None,
                    ),
                    Padding(padding_size=2),
                ],
            ),
        ],
    ),
    (
        "variants.txt",
        [
            Type(
                type_name="std::sys_common::net::SocketAddrCRepr",
                type_size=28,
                type_alignment_bytes=4,
                fields=[
                    Variant(
                        variant_name="SocketAddrCRepr",
                        variant_size=28,
                        fields=[
                            Field(
                                field_name=".v4",
                                field_size=16,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                            Field(
                                field_name=".v6",
                                field_size=28,
                                field_offset_bytes=0,
                                field_alignment_bytes=4,
                            ),
                        ],
                    )
                ],
            ),
            Type(
                type_name="Number",
                type_size=24,
                type_alignment_bytes=8,
                fields=[
                    Discriminant(discriminant_size=8),
                    Variant(
                        variant_name="Complex",
                        variant_size=16,
                        fields=[
                            Field(
                                field_name=".real",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                            Field(
                                field_name=".imaginary",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                        ],
                    ),
                    Variant(
                        variant_name="Integer",
                        variant_size=8,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                    Variant(
                        variant_name="Float",
                        variant_size=8,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                ],
            ),
            Type(
                type_name="core::num::fmt::Part<'_>",
                type_size=24,
                type_alignment_bytes=8,
                fields=[
                    Discriminant(discriminant_size=2),
                    Variant(
                        variant_name="Copy",
                        variant_size=22,
                        fields=[
                            Padding(padding_size=6),
                            Field(
                                field_name=".0",
                                field_size=16,
                                field_offset_bytes=None,
                                field_alignment_bytes=8,
                            ),
                        ],
                    ),
                    Variant(
                        variant_name="Zero",
                        variant_size=14,
                        fields=[
                            Padding(padding_size=6),
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=8,
                            ),
                        ],
                    ),
                    Variant(
                        variant_name="Num",
                        variant_size=2,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=2,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            )
                        ],
                    ),
                ],
            ),
            Type(
                type_name="std::str::pattern::SearchStep",
                type_size=24,
                type_alignment_bytes=8,
                fields=[
                    Discriminant(discriminant_size=8),
                    Variant(
                        variant_name="Match",
                        variant_size=16,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                            Field(
                                field_name=".1",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                        ],
                    ),
                    Variant(
                        variant_name="Reject",
                        variant_size=16,
                        fields=[
                            Field(
                                field_name=".0",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                            Field(
                                field_name=".1",
                                field_size=8,
                                field_offset_bytes=None,
                                field_alignment_bytes=None,
                            ),
                        ],
                    ),
                    Variant(variant_name="Done", variant_size=0, fields=[]),
                ],
            ),
        ],
    ),
]


@pytest.mark.parametrize("data_filename, data_parsed_expected", test_type_parse_data)
def test_type_parse(data_filename, data_parsed_expected):
    data_filepath = Path("tests") / Path("data") / data_filename
    with open(data_filepath, "r") as type_sizes_file:
        result = parse(type_sizes_file)
        assert result == data_parsed_expected


def test_parse_failure():
    test_parse_failure_data = """print-type-size type: `std::marker::PhantomData<*mut ()>`: 0 bytes, alignment: 1 bytes
print-type-size ty"""
    with io.StringIO(test_parse_failure_data) as type_sizes_file:
        with pytest.raises(ParseException) as err:
            parse(type_sizes_file)
        assert "Expected end of text" in err.value.explain()
